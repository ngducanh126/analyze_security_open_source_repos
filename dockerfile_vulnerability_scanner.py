def find_dockerfiles(directory):
    import os
    found = []
    for root, dirs, files in os.walk(directory):
        for f in files:
            if f.lower() == "dockerfile":
                found.append(os.path.join(root, f))
    return found

def parse_dockerfile(dockerfile):
    with open(dockerfile, "r", encoding="utf-8") as f:
        return f.readlines()

def check_for_unpinned_base_images(dockerfile_lines):
    for line in dockerfile_lines:
        if line.strip().startswith("FROM") and ":" not in line:
            return True
    return False

def check_for_latest_tag(dockerfile_lines):
    for line in dockerfile_lines:
        if line.strip().startswith("FROM") and ":latest" in line:
            return True
    return False

def check_for_insecure_commands(dockerfile_lines):
    insecure = []
    for line in dockerfile_lines:
        if "curl" in line and "| bash" in line:
            insecure.append(line.strip())
        if "wget" in line and "| bash" in line:
            insecure.append(line.strip())
    return insecure

def check_for_root_user(dockerfile_lines):
    for line in dockerfile_lines:
        if line.strip().startswith("USER") and "root" in line:
            return True
    return False

def check_for_add_instead_of_copy(dockerfile_lines):
    for line in dockerfile_lines:
        if line.strip().startswith("ADD "):
            return True
    return False

def check_for_exposed_ports(dockerfile_lines):
    ports = []
    for line in dockerfile_lines:
        if line.strip().startswith("EXPOSE"):
            ports.append(line.strip())
    return ports

def check_for_env_secrets(dockerfile_lines):
    secrets = []
    for line in dockerfile_lines:
        if line.strip().startswith("ENV") and ("SECRET" in line or "TOKEN" in line):
            secrets.append(line.strip())
    return secrets

def check_for_multistage_build(dockerfile_lines):
    return any("AS" in line for line in dockerfile_lines if line.strip().startswith("FROM"))

def check_for_chown_in_copy(dockerfile_lines):
    for line in dockerfile_lines:
        if "COPY" in line and "--chown" in line:
            return True
    return False

def check_for_healthcheck(dockerfile_lines):
    return any(line.strip().startswith("HEALTHCHECK") for line in dockerfile_lines)

